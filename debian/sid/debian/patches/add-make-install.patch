Description: Add make install
Author: Ben Albrecht <balbrecht@cray.com>
Origin: backport, https://github.com/chapel-lang/chapel/pull/6036
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
diff --git a/Makefile b/Makefile
index d2e3911796..ee528a30c2 100644
--- a/Makefile
+++ b/Makefile
@@ -168,6 +168,7 @@ clobber: FORCE
 	rm -rf lib
 	rm -rf build
 	rm -f util/chplenv/*.pyc
+	rm -f compiler/main/CONFIGURED_PREFIX
 
 depend:
 	@echo "make depend has been deprecated for the time being"
@@ -178,6 +179,9 @@ check:
 check-chpldoc: chpldoc third-party-test-venv
 	@bash $(CHPL_MAKE_HOME)/util/test/checkChplDoc
 
+install: comprt
+	@bash $(CHPL_MAKE_HOME)/util/buildRelease/install.sh --stage=${DESTDIR}
+
 -include Makefile.devel
 
 FORCE:
diff --git a/compiler/Makefile b/compiler/Makefile
index 52e84ecd91..b5670d7947 100644
--- a/compiler/Makefile
+++ b/compiler/Makefile
@@ -59,6 +59,8 @@ endif
 # the location of the BUILD_VERSION file
 #
 BUILD_VERSION_FILE = $(COMPILER_ROOT)/main/BUILD_VERSION
+# configured prefix file
+CONFIGURED_PREFIX_FILE = $(COMPILER_ROOT)/main/CONFIGURED_PREFIX
 
 
 
@@ -97,7 +99,7 @@ CHPL_OBJS = \
 
 EXECS = $(CHPL) $(CHPLDOC) $(CHPLIPE)
 
-PRETARGETS = $(BUILD_VERSION_FILE) llvm
+PRETARGETS = $(BUILD_VERSION_FILE) $(CONFIGURED_PREFIX_FILE) llvm
 TARGETS = $(CHPL)
 
 
@@ -123,6 +125,12 @@ $(BUILD_VERSION_FILE): FORCE
 	test -x $(UPDATE_BUILD_VERSION) && $(UPDATE_BUILD_VERSION) $@) || \
 	test -r $(BUILD_VERSION_FILE) || (echo '"0"' > $@);
 
+$(CHPL_MAKE_HOME)/configured-prefix:
+	echo > $(CHPL_MAKE_HOME)/configured-prefix
+
+$(CONFIGURED_PREFIX_FILE): $(CHPL_MAKE_HOME)/configured-prefix
+	echo '"'`cat $(CHPL_MAKE_HOME)/configured-prefix`'"' \ > $(CONFIGURED_PREFIX_FILE)
+
 $(CHPL_CONFIG_CHECK): | $(CHPL_BIN_DIR)
 	rm -rf $(CHPL_CONFIG_CHECK_PREFIX)
 	mkdir -p $(CHPL_CONFIG_CHECK_DIR)
diff --git a/compiler/codegen/codegen.cpp b/compiler/codegen/codegen.cpp
index 4a68e2cc50..256541f344 100644
--- a/compiler/codegen/codegen.cpp
+++ b/compiler/codegen/codegen.cpp
@@ -1866,8 +1866,8 @@ GenInfo::GenInfo(
            targetLayout(), globalToWideInfo(),
            FPM_postgen(NULL)
 {
-  std::string home(CHPL_HOME);
-  std::string rtmain = home + "/runtime/etc/rtmain.c";
+  std::string rtetc(CHPL_RUNTIME_ETC);
+  std::string rtmain = rtetc + "/rtmain.c";
 
   setupClang(this, rtmain);
 
diff --git a/compiler/include/driver.h b/compiler/include/driver.h
index 62522cd4c8..c968e0f631 100644
--- a/compiler/include/driver.h
+++ b/compiler/include/driver.h
@@ -78,6 +78,9 @@ bool useDefaultEnv(std::string key);
 extern std::map<std::string, const char*> envMap;
 
 extern char CHPL_HOME[FILENAME_MAX+1];
+extern char CHPL_RUNTIME_LIB[FILENAME_MAX+1];
+extern char CHPL_RUNTIME_INCL[FILENAME_MAX+1];
+extern char CHPL_THIRD_PARTY[FILENAME_MAX+1];
 
 extern const char* CHPL_HOST_PLATFORM;
 extern const char* CHPL_HOST_COMPILER;
diff --git a/compiler/include/version.h b/compiler/include/version.h
index a015994184..6cc5616d0d 100644
--- a/compiler/include/version.h
+++ b/compiler/include/version.h
@@ -20,6 +20,8 @@
 #ifndef _VERSION_H_
 #define _VERSION_H_
 
-void get_version(char *);
+void get_version(char * buf);
+void get_major_minor_version(char * buf);
+const char* get_configured_prefix();
 
 #endif
diff --git a/compiler/main/configured_prefix.h b/compiler/main/configured_prefix.h
new file mode 100644
index 0000000000..b4eea311fc
--- /dev/null
+++ b/compiler/main/configured_prefix.h
@@ -0,0 +1,27 @@
+/*
+ * Copyright 2004-2017 Cray Inc.
+ * Other additional copyright holders may be indicated within.
+ * 
+ * The entirety of this work is licensed under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License.
+ * 
+ * You may obtain a copy of the License at
+ * 
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _configured_prefix_H_
+#define _configured_prefix_H_
+
+static const char* CONFIGURED_PREFIX =
+#include "CONFIGURED_PREFIX"
+;
+
+#endif
diff --git a/compiler/main/driver.cpp b/compiler/main/driver.cpp
index 60f6313962..7a94761a8a 100644
--- a/compiler/main/driver.cpp
+++ b/compiler/main/driver.cpp
@@ -53,6 +53,12 @@ std::map<std::string, const char*> envMap;
 
 char CHPL_HOME[FILENAME_MAX+1] = "";
 
+// These are more specific that CHPL_HOME, to work in
+// settings where Chapel is installed.
+char CHPL_RUNTIME_LIB[FILENAME_MAX+1] = "";
+char CHPL_RUNTIME_INCL[FILENAME_MAX+1] = "";
+char CHPL_THIRD_PARTY[FILENAME_MAX+1] = "";
+
 const char* CHPL_HOST_PLATFORM = NULL;
 const char* CHPL_HOST_COMPILER = NULL;
 const char* CHPL_TARGET_PLATFORM = NULL;
@@ -237,6 +243,11 @@ static bool isMaybeChplHome(const char* path)
 static void setupChplHome(const char* argv0) {
   const char* chpl_home = getenv("CHPL_HOME");
   char*       guess     = NULL;
+  bool        installed = false;
+  char        majMinorVers[64];
+
+  // Get major.minor version string (used below)
+  get_major_minor_version(majMinorVers);
 
   // Get the executable path.
   guess = findProgramPath(argv0);
@@ -270,7 +281,7 @@ static void setupChplHome(const char* argv0) {
   }
 
   if( chpl_home ) {
-    if( strlen(chpl_home) > FILENAME_MAX )
+    if( strlen(chpl_home) >= FILENAME_MAX )
       USR_FATAL("$CHPL_HOME=%s path too long", chpl_home);
 
     if( guess == NULL ) {
@@ -289,6 +300,27 @@ static void setupChplHome(const char* argv0) {
       strncpy(CHPL_HOME, chpl_home, FILENAME_MAX);
     }
   } else {
+
+    // Check in a default location too
+    if( guess == NULL ) {
+      char TEST_HOME[FILENAME_MAX+1] = "";
+
+      // Check for Chapel libraries at installed prefix
+      // e.g. /usr/share/chapel/<vers>
+      int rc;
+      rc = snprintf(TEST_HOME, FILENAME_MAX, "%s/%s/%s",
+                  get_configured_prefix(), // e.g. /usr
+                  "/share/chapel",
+                  majMinorVers);
+      if ( rc >= FILENAME_MAX ) USR_FATAL("Installed pathname too long");
+
+      if( isMaybeChplHome(TEST_HOME) ) {
+        guess = strdup(TEST_HOME);
+
+        installed = true;
+      }
+    }
+
     if( guess == NULL ) {
       // Could not find enviro var, and could not
       // guess at exe's path name.
@@ -315,6 +347,70 @@ static void setupChplHome(const char* argv0) {
 
   if( guess )
     free(guess);
+
+
+
+  if( installed ) {
+    int rc;
+    // E.g. /usr/lib/chapel/1.16/runtime/lib
+    rc = snprintf(CHPL_RUNTIME_LIB, FILENAME_MAX, "%s/%s/%s/%s",
+                  get_configured_prefix(), // e.g. /usr
+                  "/lib/chapel",
+                  majMinorVers,
+                  "runtime/lib");
+    if ( rc >= FILENAME_MAX ) USR_FATAL("Installed pathname too long");
+    rc = snprintf(CHPL_RUNTIME_INCL, FILENAME_MAX, "%s/%s/%s/%s",
+                  get_configured_prefix(), // e.g. /usr
+                  "/lib/chapel",
+                  majMinorVers,
+                  "runtime/include");
+    if ( rc >= FILENAME_MAX ) USR_FATAL("Installed pathname too long");
+    rc = snprintf(CHPL_THIRD_PARTY, FILENAME_MAX, "%s/%s/%s/%s",
+                  get_configured_prefix(), // e.g. /usr
+                  "/lib/chapel",
+                  majMinorVers,
+                  "third-party");
+    if ( rc >= FILENAME_MAX ) USR_FATAL("Installed pathname too long");
+
+  } else {
+    int rc;
+    rc = snprintf(CHPL_RUNTIME_LIB, FILENAME_MAX, "%s/%s",
+                  CHPL_HOME, "lib");
+    if ( rc >= FILENAME_MAX ) USR_FATAL("CHPL_HOME pathname too long");
+    rc = snprintf(CHPL_RUNTIME_INCL, FILENAME_MAX, "%s/%s",
+                  CHPL_HOME, "runtime/include");
+    if ( rc >= FILENAME_MAX ) USR_FATAL("CHPL_HOME pathname too long");
+    rc = snprintf(CHPL_THIRD_PARTY, FILENAME_MAX, "%s/%s",
+                  CHPL_HOME, "third-party");
+    if ( rc >= FILENAME_MAX ) USR_FATAL("CHPL_HOME pathname too long");
+
+  }
+
+  // and setenv the derived enviro vars for use by called scripts/Makefiles
+  {
+    int rc;
+    rc = setenv("CHPL_RUNTIME_LIB", CHPL_RUNTIME_LIB, 1);
+    if( rc ) USR_FATAL("Could not setenv CHPL_RUNTIME_LIB");
+    rc = setenv("CHPL_RUNTIME_INCL", CHPL_RUNTIME_INCL, 1);
+    if( rc ) USR_FATAL("Could not setenv CHPL_RUNTIME_INCL");
+    rc = setenv("CHPL_THIRD_PARTY", CHPL_THIRD_PARTY, 1);
+    if( rc ) USR_FATAL("Could not setenv CHPL_THIRD_PARTY");
+
+    if (installed) {
+      char CHPL_CONFIG[FILENAME_MAX+1] = "";
+      // Set an extra default CHPL_CONFIG directory
+      rc = snprintf(CHPL_CONFIG, FILENAME_MAX, "%s/%s/%s",
+                    get_configured_prefix(), // e.g. /usr
+                    "/lib/chapel",
+                    majMinorVers);
+      if ( rc >= FILENAME_MAX ) USR_FATAL("Installed pathname too long");
+
+      // Don't overwrite CHPL_CONFIG so that a user-specified
+      // one would be left alone.
+      rc = setenv("CHPL_CONFIG", CHPL_CONFIG, 0);
+      if( rc ) USR_FATAL("Could not setenv CHPL_CONFIG");
+    }
+  }
 }
 
 // NOTE: We are leaking memory here by dropping astr() results on the ground.
@@ -860,6 +956,9 @@ static void printStuff(const char* argv0) {
     char* guess = findProgramPath(argv0);
 
     printf("%s\t%s\n", CHPL_HOME, guess);
+    const char* prefix = get_configured_prefix();
+    if (prefix != NULL && prefix[0] != '\0' )
+      printf("# configured prefix  %s\n", prefix);
 
     free(guess);
 
diff --git a/compiler/main/version.cpp b/compiler/main/version.cpp
index d607182250..20d9560c04 100644
--- a/compiler/main/version.cpp
+++ b/compiler/main/version.cpp
@@ -20,8 +20,13 @@
 #include <cstdio>
 #include "driver.h"
 #include "version.h"
+
+// this include sets BUILD_VERSION
 #include "version_num.h"
 
+// this include sets CONFIGURED_PREFIX
+#include "configured_prefix.h"
+
 void
 get_version(char *v) {
   v += sprintf(v, "%d.%s.%s", MAJOR_VERSION, MINOR_VERSION, UPDATE_VERSION);
@@ -29,3 +34,12 @@ get_version(char *v) {
     sprintf(v, ".%s", BUILD_VERSION);
 }
 
+void
+get_major_minor_version(char *v) {
+  sprintf(v, "%d.%s", MAJOR_VERSION, MINOR_VERSION);
+}
+
+const char*
+get_configured_prefix() {
+  return CONFIGURED_PREFIX;
+}
diff --git a/compiler/util/files.cpp b/compiler/util/files.cpp
index 494c4acc44..a8c910c73e 100644
--- a/compiler/util/files.cpp
+++ b/compiler/util/files.cpp
@@ -583,6 +583,9 @@ void codegen_makefile(fileinfo* mainfile, const char** tmpbinname, bool skip_com
 
 
   fprintf(makefile.fptr, "CHPL_MAKE_HOME = %s\n\n", CHPL_HOME);
+  fprintf(makefile.fptr, "CHPL_MAKE_RUNTIME_LIB = %s\n\n", CHPL_RUNTIME_LIB);
+  fprintf(makefile.fptr, "CHPL_MAKE_RUNTIME_INCL = %s\n\n", CHPL_RUNTIME_INCL);
+  fprintf(makefile.fptr, "CHPL_MAKE_THIRD_PARTY = %s\n\n", CHPL_THIRD_PARTY);
   fprintf(makefile.fptr, "TMPDIRNAME = %s\n\n", tmpDirName);
 
   // Generate one variable containing all envMap information to pass to printchplenv
diff --git a/configure b/configure
new file mode 100755
index 0000000000..9495602b44
--- /dev/null
+++ b/configure
@@ -0,0 +1,149 @@
+#!/bin/bash
+
+
+if [ ! -d util ]
+then
+  echo Error: missing util/. Must be run from CHPL_HOME.
+  exit -1
+fi
+
+if [ ! -d compiler/main ]
+then
+  echo Error: missing compiler/main/. Must be run from CHPL_HOME.
+  exit -1
+fi
+
+
+# PREFIX is for split installations, e.g. /usr/bin/chpl, /usr/share/chapel
+PREFIX=/usr/local
+PREFIX_SET=0
+
+# DEST_DIR is for installations basically copying source layout 
+# Different from DESTDIR, which is for staged installs
+# this variable is for installing the Chapel directory in one place
+# (to mirror release / source checkout)
+DEST_DIR=""
+DEST_DIR_SET=0
+
+# Argument parsing
+for arg in "$@"
+do
+  case $arg in
+    #e.g. -s|--short)
+    --prefix=*)
+      PREFIX="${arg#*=}"
+      PREFIX_SET=1
+      shift
+      ;;
+    --chpl-home=*)
+      DEST_DIR="${arg#*=}"
+      DEST_DIR_SET=1
+      shift
+      ;;
+    *)
+      echo
+      echo "Usage: $0 [--prefix=PREFIX] [--chpl-home=DEST_DIR]"
+      echo
+      echo "       --prefix=PREFIX selects a split installation"
+      echo "                e.g. PREFIX could be /usr/ to install"
+      echo "                     to /usr/bin/chpl, /usr/share/chapel/"
+      echo "                     e.g.  /usr/share/chapel/<vers>/modules"
+      echo
+      echo "       --chpl-home=DEST_DIR selects a bundled installation"
+      echo "                e.g. DEST_DIR could be /opt/chapel/ to install"
+      echo "                     to /opt/chapel with subdirectories"
+      echo "                     matching the source code / release"
+      echo "                     e.g.  /opt/chapel/modules"
+      echo
+      exit -1
+    ;;
+  esac
+
+done
+
+# Check that PREFIX and DEST_DIR are not both set.
+if [ "$PREFIX_SET" -ne 0 ]
+then
+  if [ "$DEST_DIR_SET" -ne 0 ]
+  then
+    echo "Error: both --prefix and --chpl-home were provided"
+    exit -1
+  fi
+fi
+
+NORMALIZED=""
+mynormalizepath () {
+  # Normalize PREFIX e.g.
+  P="$1"
+  case "$P" in
+    *~*)
+      # Replace ~ with home directory
+      P="${P/#\~/$HOME}"
+      ;;
+    *)
+      ;;
+  esac
+
+  # Normalize $P more - normalize path
+  P=`(unset CDPATH && cd "$P" && pwd)`
+
+  # Make sure we can cd into $P
+  if [ $? -ne 0 ]
+  then
+    echo "Error: Could not cd into prefix directory '$P'"
+    echo "       ... perhaps it does not exist?"
+    exit -1
+  fi
+
+  NORMALIZED="$P"
+  return 0
+}
+
+# Save configured installation prefix/dir
+rm -f configured-chpl-home
+rm -f configured-prefix
+if [ "$DEST_DIR_SET" -ne 0 ]
+then
+  # Normalize DEST_DIR
+  mynormalizepath "$DEST_DIR"
+  DEST_DIR="$NORMALIZED"
+  # Save target installation directory for 'make install' / install.sh
+  echo "$DEST_DIR" > configured-chpl-home
+else
+  # Normalize PREFIX
+  mynormalizepath "$PREFIX"
+  PREFIX="$NORMALIZED"
+  # Save prefix for building the compiler
+  echo "$PREFIX" > configured-prefix
+fi
+
+# Save currently selected configuration
+./util/printchplenv --simple > configured-chplconfig
+
+echo
+echo "  Currently selected Chapel configuration:"
+echo
+./util/printchplenv --anonymize
+echo
+echo "  Selected installation options:"
+echo
+if [ "$DEST_DIR_SET" -ne 0 ]
+then
+  echo "install to CHPL_HOME: $DEST_DIR"
+else
+  echo "PREFIX: $PREFIX"
+fi
+echo
+echo "  To change the selected Chapel configuration, set environment variables."
+echo "  See doc/rst/usingchapel/chplenv.rst"
+echo "  To change installation options, see ./configure --help"
+echo
+echo "  If the configuration above is appropriate, build Chapel with:"
+echo
+echo "make"
+echo "make check"
+echo
+echo "  and possibly install it with"
+echo
+echo "make install"
+echo
diff --git a/make/Makefile.base b/make/Makefile.base
index 11902a7e8c..6d5e28ce42 100644
--- a/make/Makefile.base
+++ b/make/Makefile.base
@@ -146,7 +146,11 @@ CHPL_MAKE_BASE_LFLAGS =
 #
 # Third-party package stuff
 #
-THIRD_PARTY_DIR = $(CHPL_MAKE_HOME)/third-party
+ifdef CHPL_MAKE_THIRD_PARTY
+  THIRD_PARTY_DIR = $(CHPL_MAKE_THIRD_PARTY)
+else
+  THIRD_PARTY_DIR = $(CHPL_MAKE_HOME)/third-party
+endif
 
 include $(THIRD_PARTY_DIR)/amudprun/Makefile.include
 include $(THIRD_PARTY_DIR)/gasnet/Makefile.include
diff --git a/runtime/etc/Makefile.include b/runtime/etc/Makefile.include
index 5b0fc1f7bf..f157d6d76a 100644
--- a/runtime/etc/Makefile.include
+++ b/runtime/etc/Makefile.include
@@ -89,7 +89,14 @@ GEN_LFLAGS += $(RUNTIME_LFLAGS)
 
 CHPL_RT_INC_DIR = $(RUNTIME_INCLS)
 
-CHPL_RT_LIB_DIR = $(CHPL_MAKE_HOME)/$(LIB_RT_DIR)
+ifndef CHPL_MAKE_RUNTIME_LIB
+CHPL_MAKE_RUNTIME_LIB = $(CHPL_MAKE_HOME)/lib
+endif
+
+CHPL_RT_LIB_DIR = $(CHPL_MAKE_RUNTIME_LIB)/$(CHPL_MAKE_RUNTIME_SUBDIR)
+
+x:
+	@echo $(CHPL_MAKE_RUNTIME_LIB)
 
 printincludesanddefines:
 	@echo $(CHPL_MAKE_BASE_CFLAGS) $(RUNTIME_DEFS) $(RUNTIME_INCLS)
diff --git a/runtime/make/Makefile.runtime.include b/runtime/make/Makefile.runtime.include
index 1abefff567..2c81f272df 100644
--- a/runtime/make/Makefile.runtime.include
+++ b/runtime/make/Makefile.runtime.include
@@ -24,7 +24,11 @@ ifndef RUNTIME_ROOT
 RUNTIME_ROOT=$(CHPL_MAKE_HOME)/runtime/
 endif
 
+ifdef CHPL_MAKE_RUNTIME_INCL
+RUNTIME_INCLUDE_ROOT = $(CHPL_MAKE_RUNTIME_INCL)
+else
 RUNTIME_INCLUDE_ROOT = $(RUNTIME_ROOT)/include
+endif
 
 RUNTIME_DEFS += \
         -DCHPL_TASKS_MODEL_H=\"tasks-$(CHPL_MAKE_TASKS).h\" \
diff --git a/util/buildRelease/install.sh b/util/buildRelease/install.sh
new file mode 100755
index 0000000000..ddd4dcc3ee
--- /dev/null
+++ b/util/buildRelease/install.sh
@@ -0,0 +1,242 @@
+#!/bin/bash
+
+STAGE=""
+PREFIX=""
+# Different from DESTDIR, which is for staged installs
+# this variable is for installing the Chapel directory in one place
+# (to mirror release / source checkout)
+DEST_DIR=""
+
+# Argument parsing
+for arg in "$@"
+do
+  case $arg in
+    #e.g. -s|--short)
+    --stage=*)
+      STAGE="${arg#*=}"
+      STAGE_SET=1
+      shift
+      ;;
+    *)
+      echo
+      echo "Usage: $0 [--stage=DESTDIR]"
+      echo
+      echo "       --stage=DESTDIR prepends DESTDIR to prefix"
+      echo "                e.g. for staged installation as with"
+      echo "                     the DESTDIR Makefile variable"
+      echo
+      exit -1
+    ;;
+  esac
+
+done
+
+
+if [ ! -d "$CHPL_HOME" ]
+then
+  if [ -d "util/chplenv" ]
+  then
+    export CHPL_HOME="$PWD"
+    echo "Detecting CHPL_HOME as $CHPL_HOME"
+  else
+    echo Exiting: CHPL_HOME not set or not a directory
+    exit -1
+  fi
+fi
+
+if [ -f "$CHPL_HOME/configured-prefix" ]
+then
+  read -r PREFIX < "$CHPL_HOME/configured-prefix"
+fi
+
+if [ ! -z "$PREFIX" ]
+then
+  PREFIX="${STAGE}${PREFIX}"
+  mkdir -p "$PREFIX"
+  if [ ! -d "$PREFIX" ] ; then
+    echo "Exiting: Installation prefix path '$PREFIX' does not exist"
+    exit -1
+  fi
+else
+  if [ -f "$CHPL_HOME/configured-chpl-home" ]
+  then
+    read -r DEST_DIR < "$CHPL_HOME/configured-chpl-home"
+    DEST_DIR="${STAGE}${DEST_DIR}"
+    if [ ! -d "$DEST_DIR" ]
+    then
+      echo "Exiting: Installation dest path '$DEST_DIR' does not exist"
+      exit -1
+    fi
+  else
+    echo "Exiting: Installation path not configured."
+    echo "         See ./configure --help"
+    exit -1
+  fi
+fi
+
+case "$PREFIX" in
+  '""')
+    echo Exiting: PREFIX was not set.
+    echo          ... did you forget to run configure ?
+    exit -1
+    ;;
+  *\\*)
+    # For now, fail if PREFIX contains a backslash.
+    # The issue is that the C string and Bash variable might treat
+    # the prefix differently.
+    echo Exiting: PREFIX contains backslash
+    echo          ... please use a prefix that does not contain backslash
+    exit -1
+    ;;
+  *)
+    ;;
+esac
+
+# Gather the version number for the Chapel binary.
+export CHPL_HOST_PLATFORM=`"$CHPL_HOME"/util/chplenv/chpl_platform.py host`
+VERS=`$CHPL_HOME/bin/$CHPL_HOST_PLATFORM/chpl --version`
+# Remove the "chpl Version " part
+VERS=${VERS#chpl Version }
+# Replace the periods with spaces.
+VERS=${VERS//./ }
+VERS_ARRAY=($VERS)
+MAJOR_VERSION=${VERS_ARRAY[0]}
+MINOR_VERSION=${VERS_ARRAY[1]}
+VERS="${MAJOR_VERSION}.${MINOR_VERSION}"
+echo "Installing Chapel version $VERS"
+
+if [ ! -z "$PREFIX" ]
+then
+  DEST_RUNTIME_LIB="$PREFIX/lib/chapel/$VERS/runtime/lib"
+  DEST_RUNTIME_INCL="$PREFIX/lib/chapel/$VERS/runtime/include"
+  DEST_THIRD_PARTY="$PREFIX/lib/chapel/$VERS/third-party"
+  DEST_CHPL_HOME="$PREFIX/share/chapel/$VERS"
+  echo "Installing Chapel split to bin, lib, share to $PREFIX"
+else
+  DEST_RUNTIME_LIB="$DEST_DIR/lib"
+  DEST_RUNTIME_INCL="$DEST_DIR/runtime/include"
+  DEST_THIRD_PARTY="$DEST_DIR/third-party"
+  DEST_CHPL_HOME="$DEST_DIR"
+  echo "Installing Chapel-as-a-directory to $DEST_DIR"
+fi
+
+echo "DEST_RUNTIME_LIB=$DEST_RUNTIME_LIB"
+echo "DEST_RUNTIME_INCL=$DEST_RUNTIME_INCL"
+echo "DEST_THIRD_PARTY=$DEST_THIRD_PARTY"
+echo "DEST_CHPL_HOME=$DEST_CHPL_HOME"
+
+myinstalldir () {
+  FROM="$CHPL_HOME/$1"
+  TO="$2"
+  #echo myinstalldir $FROM $TO
+  mkdir -p $TO
+  ( cd $FROM ; tar cf - . ) | ( cd $TO ; tar xf - )
+  return $?
+}
+
+myinstallfile () {
+  FROM="$CHPL_HOME/$1"
+  TO="$2"
+  mkdir -p $TO
+  #echo myinstallfile $FROM $TO
+  cp $FROM $TO
+  return $?
+}
+
+myinstallfileto () {
+  FROM="$CHPL_HOME/$1"
+  TO="$2"
+  #echo myinstallfile $FROM $TO
+  cp $FROM $TO
+  return $?
+}
+
+
+# copy chpl and chpldoc
+if [ ! -z "$PREFIX" ]
+then
+  myinstallfile  "bin/$CHPL_HOST_PLATFORM/chpl" "$PREFIX/bin"
+else
+  myinstalldir  bin                       "$DEST_DIR"/bin
+fi
+
+# copy runtime lib
+myinstalldir  lib                     "$DEST_RUNTIME_LIB"
+
+# copy runtime include
+myinstalldir  runtime/include         "$DEST_RUNTIME_INCL"
+
+# copy README etc
+myinstallfile ACKNOWLEDGEMENTS.md     "$DEST_CHPL_HOME"
+myinstallfile CHANGES.md              "$DEST_CHPL_HOME"
+myinstallfile CONTRIBUTORS.md         "$DEST_CHPL_HOME"
+myinstallfile COPYRIGHT               "$DEST_CHPL_HOME"
+myinstallfile GOALS.md                "$DEST_CHPL_HOME"
+myinstallfile PERFORMANCE.md          "$DEST_CHPL_HOME"
+myinstallfile README.rst              "$DEST_CHPL_HOME"
+#myinstallfile STATUS                  "$DEST_CHPL_HOME"
+
+# copy modules
+myinstalldir  modules                 "$DEST_CHPL_HOME"/modules
+
+# copy util/printchplenv 
+myinstallfile util/printchplenv       "$DEST_CHPL_HOME"/util/
+
+# copy util/chplenv
+myinstalldir  util/chplenv            "$DEST_CHPL_HOME"/util/chplenv/
+
+if [ ! -z "$DEST_DIR" ]
+then
+  # copy util/setchplenv*, util/quickstart
+  for f in util/setchplenv*
+  do
+    myinstallfile "$f"                "$DEST_CHPL_HOME"/util/
+  done
+
+  myinstalldir  util/quickstart       "$DEST_CHPL_HOME"/util/quickstart/
+fi
+
+# copy compiler/etc
+myinstalldir  compiler/etc            "$DEST_CHPL_HOME"/compiler/etc/
+
+# copy runtime/etc
+myinstalldir  runtime/etc             "$DEST_CHPL_HOME"/runtime/etc/
+
+# copy runtime/make
+myinstalldir  runtime/make            "$DEST_CHPL_HOME"/runtime/make/
+
+# copy make
+# TODO - just Makefile.base, platform, tasks ?
+myinstalldir  make                    "$DEST_CHPL_HOME"/make/
+
+# copy third-party makefile snippets
+cd third-party
+THIRD_PARTY_DIRS=`echo *`
+cd ..
+
+for dir in $THIRD_PARTY_DIRS
+do
+  #echo "Considering 3p dir $dir"
+  if [ -f third-party/"$dir"/Makefile.include ]
+  then
+    for f in third-party/"$dir"/Makefile*
+    do
+      myinstallfile "$f"  "$DEST_THIRD_PARTY"/"$dir"
+    done
+  fi
+  if [ -d third-party/"$dir"/install ]
+  then
+    myinstalldir "third-party/$dir/install" "$DEST_THIRD_PARTY/$dir/install/"
+  fi
+done
+
+# copy utf8-decoder header
+myinstallfile third-party/utf8-decoder/utf8-decoder.h "$DEST_THIRD_PARTY"/utf8-decoder/
+# copy configured-chplconfig
+if [ ! -z "$PREFIX" ]
+then
+  myinstallfileto  configured-chplconfig  "$PREFIX/lib/chapel/$VERS/chplconfig"
+else
+  myinstallfileto  configured-chplconfig  "$DEST_CHPL_HOME/chplconfig"
+fi
+ find "$DEST_CHPL_HOME" -name '*.pyc' -delete
diff --git a/util/chplenv/chpl_home_utils.py b/util/chplenv/chpl_home_utils.py
index 0dac1e5bfb..4b301b00cd 100644
--- a/util/chplenv/chpl_home_utils.py
+++ b/util/chplenv/chpl_home_utils.py
@@ -17,6 +17,11 @@ def get_chpl_home():
         chpl_home = dirname(dirname(dirname(os.path.realpath(__file__))))
     return chpl_home
 
+@memoize
+def get_chpl_third_party():
+    default = os.path.join(get_chpl_home(), 'third-party')
+    chpl_third_party = overrides.get('CHPL_THIRD_PARTY', default)
+    return chpl_third_party
 
 @memoize
 def using_chapel_module():
diff --git a/util/chplenv/third_party_utils.py b/util/chplenv/third_party_utils.py
index 2b442a3a2d..40604681e1 100644
--- a/util/chplenv/third_party_utils.py
+++ b/util/chplenv/third_party_utils.py
@@ -6,7 +6,7 @@ chplenv_dir = os.path.dirname(__file__)
 sys.path.insert(0, os.path.abspath(chplenv_dir))
 
 import chpl_arch, chpl_compiler, chpl_locale_model, chpl_platform
-from chpl_home_utils import get_chpl_home, using_chapel_module
+from chpl_home_utils import get_chpl_home, get_chpl_third_party, using_chapel_module
 from utils import error, memoize, run_command
 
 
@@ -25,7 +25,7 @@ def default_uniq_cfg_path():
 #
 @memoize
 def get_cfg_install_path(pkg, ucp=default_uniq_cfg_path()):
-    return os.path.join(get_chpl_home(), 'third-party', pkg, 'install', ucp)
+    return os.path.join(get_chpl_third_party(), pkg, 'install', ucp)
 
 #
 # Return libraries and other options mentioned in the old_library and
@@ -49,7 +49,7 @@ def handle_la(la_path):
                     for tok in line.split('\'')[1].split():
                         # paths reflect built env; replace with $CHPL_HOME
                         pat = re.compile(r'^((-L\s*)?).*(/third-party/)')
-                        repl = r'\1' + get_chpl_home() + r'\3'
+                        repl = r'\1' + get_chpl_third_party() + '/'
                         tok = pat.sub(repl, tok)
                         if tok.endswith('.la'):
                             args.extend(handle_la(tok))
